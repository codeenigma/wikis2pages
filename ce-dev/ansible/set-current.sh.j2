#!/bin/sh
# Script to set up a new wiki2pages project.
set -e

# Load OS information.
# shellcheck source=/dev/null
. /etc/os-release

usage(){
  /usr/bin/echo 'set-current.sh [OPTIONS]'
  /usr/bin/echo 'Set up a wiki2pages project as the one to be built.'
  /usr/bin/echo ''
  /usr/bin/echo 'Available options:'
  /usr/bin/echo '--project: project to use, if not provided the script will present a list'
  /usr/bin/echo '--no-ce-dev: do not run a ce-dev build'
  /usr/bin/echo ''
}

# Parse options arguments.
parse_options(){
  while [ "${1:-}" ]; do
    case "$1" in
      "--project")
          shift
          CURRENT_PROJECT="$1"
        ;;
      "--no-ce-dev")
          NO_CE_DEV="true"
        ;;
        *)
        usage
        exit 1
        ;;
    esac
    shift
  done
}

# Set default variables.
OWN_DIR=$(dirname "$0")
cd "$OWN_DIR" || exit 1
OWN_DIR=$(git rev-parse --show-toplevel)
cd "$OWN_DIR" || exit 1
OWN_DIR=$(pwd -P)
CURRENT_PROJECT=""
NO_CE_DEV="false"

# Parse options.
parse_options "$@"

clone_current(){
  case $CURRENT_PROJECT in
    {% for name, wiki in wikis.items() %}
    "{{ name }}")
      if [ ! -d "$OWN_DIR/content/{{ name }}" ]; then
        git clone {{ wiki.src }} --branch {{ wiki.src_branch }} "$OWN_DIR/content/{{ name }}"
      fi
      if [ ! -d "$OWN_DIR/public/{{ name }}" ]; then
      {% if wiki.dest is defined and wiki.dest %}
        git clone {{ wiki.dest }} --branch {{ wiki.dest_branch }} "$OWN_DIR/public/{{ name }}"
      {% else %}
        mkdir "$OWN_DIR/public/{{ name }}"
      {% endif %}
      fi
    ;;
    {% endfor %}
    *)
      echo "Aborting! Invalid choice."
      exit 1
    ;;
  esac
}

prompt_from_list(){
  echo "Which project do you want to use?"
  {% for name, wiki in wikis.items() %}
  echo "{{ loop.index }}) {{ name }}"
  {% endfor %}

  read CURRENT

  case $CURRENT in
  {% for name, wiki in wikis.items() %}
    "{{ loop.index }}")
      CURRENT_PROJECT="{{ name }}"
    ;;
  {% endfor %}
    *)
      echo "Invalid choice"
      exit 1
    ;;
  esac
}

if [ -z "$CURRENT_PROJECT" ]; then
  prompt_from_list
fi

clone_current

echo "current: $CURRENT_PROJECT" > "$OWN_DIR/ce-dev/ansible/current.yml"

cd "$OWN_DIR"

if [ "$NO_CE_DEV" = "false" ]; then
  ce-dev start
  ce-dev provision
  ce-dev deploy
fi
